import { PUBLIC_ADDRESS_FACTORY_DEPLOYER } from "@owlprotocol/envvars";
import { ERC1167FactoryFactory } from "../ethers/index.js";
import { ERC1167FactoryAddress } from "../utils/ERC1167Factory/getAddress.js";
import { logDeployment, RunTimeEnvironment } from "../utils.js";

//Cached deployment transactions for local networks (when developer does not have deployer pkey)
const deploymentTx = {
    31337: "0xf90883808502540be400830927c08080b9082e6080806040523461001657610812908161001c8239f35b600080fdfe60806040526004361015610013575b600080fd5b6000803560e01c9081635b09f8b3146101995781637116d4e51461005d57508063d0881939146100545763eada0a961461004c57600080fd5b61000e6103cd565b5061000e61034d565b346101965761006b366102f9565b90936001600160a01b039392909190818516801515908161018b575b5061016457916e5af43d82803e903d91602b57fd5bf36100ac600993886037966106f9565b94763d602d80600a3d3981f3363d3d373d3d3d363d7300000062ffffff8260881c1617835260781b17602052f5908116156101255781610107925161010b575b506040516001600160a01b0390911681529081906020820190565b0390f35b61011e90610117610792565b90836104c7565b50826100ec565b60405162461bcd60e51b8152602060048201526017602482015276115490cc4c4d8dce8818dc99585d194c8819985a5b1959604a1b6044820152606490fd5b60405163708986dd60e11b81526001600160a01b0383166004820152336024820152604490fd5b905033141587610087565b80fd5b346101965760206101b56101ac3661029b565b9291909161041d565b6040516001600160a01b039091168152f35b50634e487b7160e01b600052604160045260246000fd5b6060810190811067ffffffffffffffff8211176101fa57604052565b6102026101c7565b604052565b90601f8019910116810190811067ffffffffffffffff8211176101fa57604052565b60209067ffffffffffffffff8111610247575b601f01601f19160190565b61024f6101c7565b61023c565b81601f8201121561000e5780359061026b82610229565b926102796040519485610207565b8284526020838301011161000e57816000926020809301838601378301015290565b608060031982011261000e576004359167ffffffffffffffff60243581811161000e57836102cb91600401610254565b9260443591821161000e576102e291600401610254565b906064356001600160a01b038116810361000e5790565b608060031982011261000e576001600160a01b03600435818116810361000e5792602435926044359067ffffffffffffffff821161000e5761033d91600401610254565b91606435908116810361000e5790565b503461000e5760206055604361036e610365366102f9565b919392936106f9565b604051913060388401526f5af43d82803e903d91602b57fd5bf3ff60248401526014830152733d602d80600a3d3981f3363d3d373d3d3d363d73825260588201526037600c820120607882015201206040519060018060a01b03168152f35b503461000e5760206055600b6103ed6103e53661029b565b9193926106f9565b9084815191012090604051916040830152848201523081520160ff8153206040516001600160a01b039091168152f35b919290916001600160a01b03821680151590816104bc575b50610164579083610445926106f9565b8251156104af576104ab9161045991610601565b9160405190610467826101de565b602b82527f45524331313637466163746f72793a204661696c656420746f2063616c6c207460208301526a1a194818dbdb9d1c9858dd60aa1b6040830152836104c7565b5090565b6104b99250610601565b90565b905033141538610435565b6000806104b9949360208151910182855af13d15610507573d916104ea83610229565b926104f86040519485610207565b83523d6000602085013e61055b565b60609161055b565b1561051657565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b9192901561057b575081511561056f575090565b6104b9903b151561050f565b82519091501561058e5750805190602001fd5b6044604051809262461bcd60e51b8252602060048301526105be81518092816024860152602086860191016105cc565b601f01601f19168101030190fd5b918091926000905b8282106105ec5750116105e5575050565b6000910152565b915080602091830151818601520182916105d4565b90805115610665576020815191016000f5906001600160a01b0382161561062457565b60405162461bcd60e51b8152602060048201526019602482015278437265617465323a204661696c6564206f6e206465706c6f7960381b6044820152606490fd5b606460405162461bcd60e51b815260206004820152602060248201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f6044820152fd5b6020929181526106c1825180938580850191016105cc565b010190565b90916034939282526bffffffffffffffffffffffff199060601b1660208201526106c182518093602086850191016105cc565b916001600160a01b0381161561076f5781511561073c57610736906107286040519384926020840196876106c6565b03601f198101835282610207565b51902090565b604080516020810194855260609290921b6bffffffffffffffffffffffff19169082015290506107368160548101610728565b50805161077a575090565b610736610728916040519283916020830195866106a9565b6040519061079f826101de565b602882526768652070726f787960c01b6040837f45524331313637466163746f72793a204661696c656420746f2063616c6c20746020820152015256fea26469706673582212202f81e6c1600c223d151c53f6f5720ef9247a178f0f08f4d38695b8e512e6b03a64736f6c634300080e003382f4f5a00e2194f818fb9fbcceade4a5b9013f5522f72944e920bd1153e3d4f89be7abd5a0651e6795b6980d9fa81445eb26193ff5f488344451f385995cb49529d9cf8a21",
} as { [k: number]: string };

export const ProxyFactoryDeploy = async ({ provider, signers, network }: RunTimeEnvironment) => {
    //Check if already deployed
    const cloneFactoryAddress = ERC1167FactoryAddress;
    const cloneFactoryFactory = ERC1167FactoryFactory.connect(signers[0])
    const cloneFactory = cloneFactoryFactory.attach(cloneFactoryAddress)

    const name = "ERC1167Factory";

    if ((await provider.getCode(cloneFactory.address)) != "0x") {
        logDeployment(network.name, name, cloneFactory.address, "deterministic", "exists");
        return cloneFactory;
    }

    const nonce = await provider.getTransactionCount(PUBLIC_ADDRESS_FACTORY_DEPLOYER);
    if (nonce != 0) {
        throw new Error(
            `FactoryDeployer not deployed at ${cloneFactoryAddress} and signerAddress ${PUBLIC_ADDRESS_FACTORY_DEPLOYER}.nonce = ${nonce} > 0`,
        );
    }

    //Check cached deployment transactions
    const chainId = network.config.chainId as number;
    const chainIdTx = deploymentTx[chainId];
    if (chainIdTx) {
        //Stored deployment tx
        const tx = await provider.sendTransaction(chainIdTx);
        await tx.wait(1);
    } else {
        const signerAddress = await signers[0].getAddress();
        if (signerAddress != PUBLIC_ADDRESS_FACTORY_DEPLOYER) {
            throw new Error(
                `Attempting to deploy ProxyFactory with incorrect address ${signerAddress} != ${PUBLIC_ADDRESS_FACTORY_DEPLOYER} (expected)`,
            );
        }
        //Deploy directly
        const isEIP1559 = network.config.eip1559 as boolean;
        let tx: any = { nonce: 0, gasLimit: 600000, type: 0 };
        if (isEIP1559)
            tx = {
                ...tx,
                type: 2,
                maxFeePerGas: network.config.maxFeePerGas,
                maxPriorityFeePerGas: network.config.maxPriorityFeePerGas,
            };
        else tx = { ...tx, gasPrice: network.config.gasPrice };
        await cloneFactoryFactory.deploy(tx);
    }

    logDeployment(network.name, name, cloneFactory.address, "deterministic", "deployed");
    return cloneFactory;
};

ProxyFactoryDeploy.tags = ["ProxyFactory"];
ProxyFactoryDeploy.dependencies = ["Balances"];
